#!/usr/bin/python

import argparse
import logging
import os
import re
import signal
from collections import namedtuple, OrderedDict
from threading import Lock, Event

import cec
import uinput

Key = namedtuple("Key", ("key", "multi_press"))


# https://github.com/Pulse-Eight/libcec/blob/master/include/cectypes.h
class CECUserControlCode:
    SELECT = 0x00
    UP = 0x01
    DOWN = 0x02
    LEFT = 0x03
    RIGHT = 0x04
    RIGHT_UP = 0x05
    RIGHT_DOWN = 0x06
    LEFT_UP = 0x07
    LEFT_DOWN = 0x08
    ROOT_MENU = 0x09
    SETUP_MENU = 0x0A
    CONTENTS_MENU = 0x0B
    FAVORITE_MENU = 0x0C
    EXIT = 0x0D
    # reserved: 0x0E, 0x0F
    TOP_MENU = 0x10
    DVD_MENU = 0x11
    # reserved: 0x12 ... 0x1C
    NUMBER_ENTRY_MODE = 0x1D
    NUMBER11 = 0x1E
    NUMBER12 = 0x1F
    NUMBER0 = 0x20
    NUMBER1 = 0x21
    NUMBER2 = 0x22
    NUMBER3 = 0x23
    NUMBER4 = 0x24
    NUMBER5 = 0x25
    NUMBER6 = 0x26
    NUMBER7 = 0x27
    NUMBER8 = 0x28
    NUMBER9 = 0x29
    DOT = 0x2A
    ENTER = 0x2B
    CLEAR = 0x2C
    NEXT_FAVORITE = 0x2F
    CHANNEL_UP = 0x30
    CHANNEL_DOWN = 0x31
    PREVIOUS_CHANNEL = 0x32
    SOUND_SELECT = 0x33
    INPUT_SELECT = 0x34
    DISPLAY_INFORMATION = 0x35
    HELP = 0x36
    PAGE_UP = 0x37
    PAGE_DOWN = 0x38
    # reserved: 0x39 ... 0x3F
    POWER = 0x40
    VOLUME_UP = 0x41
    VOLUME_DOWN = 0x42
    MUTE = 0x43
    PLAY = 0x44
    STOP = 0x45
    PAUSE = 0x46
    RECORD = 0x47
    REWIND = 0x48
    FAST_FORWARD = 0x49
    EJECT = 0x4A
    FORWARD = 0x4B
    BACKWARD = 0x4C
    STOP_RECORD = 0x4D
    PAUSE_RECORD = 0x4E
    # reserved: 0x4F
    ANGLE = 0x50
    SUB_PICTURE = 0x51
    VIDEO_ON_DEMAND = 0x52
    ELECTRONIC_PROGRAM_GUIDE = 0x53
    TIMER_PROGRAMMING = 0x54
    INITIAL_CONFIGURATION = 0x55
    SELECT_BROADCAST_TYPE = 0x56
    SELECT_SOUND_PRESENTATION = 0x57
    # reserved: 0x58 ... 0x5F
    PLAY_FUNCTION = 0x60
    PAUSE_PLAY_FUNCTION = 0x61
    RECORD_FUNCTION = 0x62
    PAUSE_RECORD_FUNCTION = 0x63
    STOP_FUNCTION = 0x64
    MUTE_FUNCTION = 0x65
    RESTORE_VOLUME_FUNCTION = 0x66
    TUNE_FUNCTION = 0x67
    SELECT_MEDIA_FUNCTION = 0x68
    SELECT_AV_INPUT_FUNCTION = 0x69
    SELECT_AUDIO_INPUT_FUNCTION = 0x6A
    POWER_TOGGLE_FUNCTION = 0x6B
    POWER_OFF_FUNCTION = 0x6C
    POWER_ON_FUNCTION = 0x6D
    # reserved: 0x6E ... 0x70
    F1_BLUE = 0x71
    F2_RED = 0X72
    F3_GREEN = 0x73
    F4_YELLOW = 0x74
    F5 = 0x75
    DATA = 0x76
    # reserved: 0x77 ... 0xFF
    AN_RETURN = 0x91  # return (Samsung)
    AN_CHANNELS_LIST = 0x96  # channels list (Samsung)
    MAX = 0x96
    UNKNOWN = 0xFF


class NoCECAdapters(Exception):
    pass


class Bindings(object):
    MAPPING = {}

    def map_to_key(self, cec_code):
        return self.MAPPING.get(cec_code)

    def cec_keys(self):
        return tuple(self.MAPPING.keys())

    def mapping_keys(self):
        return tuple(set(k.key for k in self.MAPPING.values()))


class DefaultBindings(Bindings):
    MAPPING = {
        CECUserControlCode.SELECT: Key(uinput.KEY_ENTER, False),
        CECUserControlCode.EXIT: Key(uinput.KEY_BACKSPACE, False),
        CECUserControlCode.UP: Key(uinput.KEY_UP, True),
        CECUserControlCode.DOWN: Key(uinput.KEY_DOWN, True),
        CECUserControlCode.LEFT: Key(uinput.KEY_LEFT, True),
        CECUserControlCode.RIGHT: Key(uinput.KEY_RIGHT, True),
    }


class RetropieBindings(Bindings):
    _INPUT_PLAYER1_RE = re.compile(r"""^\s*input_player1_(\w+)\s*=\s*(["'])(\w+)\2\s*$""")
    _RETROARCH_CFG_FILE = "/opt/retropie/configs/all/retroarch.cfg"
    _RETROARCH_TO_CEC_KEYMAP = {
        "a": Key(CECUserControlCode.SELECT, False), "b": Key(CECUserControlCode.EXIT, False),
        "up": Key(CECUserControlCode.UP, True), "down": Key(CECUserControlCode.DOWN, True),
        "left": Key(CECUserControlCode.LEFT, True), "right": Key(CECUserControlCode.RIGHT, True),
        "start": Key(CECUserControlCode.F2_RED, False), "select": Key(CECUserControlCode.F3_GREEN, False),
    }
    _RETROARCH_TO_UINTPUT_KEYMAP = {
        "left": uinput.KEY_LEFT, "right": uinput.KEY_RIGHT,
        "up": uinput.KEY_UP, "down": uinput.KEY_DOWN,
        "enter": uinput.KEY_ENTER, "kp_enter": uinput.KEY_KPENTER,
        "tab": uinput.KEY_TAB, "insert": uinput.KEY_INSERT,
        "del": uinput.KEY_DELETE, "end": uinput.KEY_END,
        "home": uinput.KEY_HOME, "rshift": uinput.KEY_RIGHTSHIFT,
        "shift": uinput.KEY_LEFTSHIFT, "rctrl": uinput.KEY_RIGHTCTRL,
        "ctrl": uinput.KEY_LEFTCTRL, "ralt": uinput.KEY_RIGHTALT,
        "alt": uinput.KEY_LEFTALT, "space": uinput.KEY_SPACE,
        "escape": uinput.KEY_ESC, "kp_minus": uinput.KEY_KPMINUS,
        "kp_plus": uinput.KEY_KPPLUS, "f1": uinput.KEY_F1,
        "f2": uinput.KEY_F2, "f3": uinput.KEY_F3,
        "f4": uinput.KEY_F4, "f5": uinput.KEY_F5,
        "f6": uinput.KEY_F6, "f7": uinput.KEY_F7,
        "f8": uinput.KEY_F8, "f9": uinput.KEY_F9,
        "f10": uinput.KEY_F10, "f11": uinput.KEY_F11,
        "f12": uinput.KEY_F12, "num1": uinput.KEY_1,
        "num2": uinput.KEY_2, "num3": uinput.KEY_3,
        "num4": uinput.KEY_4, "num5": uinput.KEY_5,
        "num6": uinput.KEY_6, "num7": uinput.KEY_7,
        "num8": uinput.KEY_8, "num9": uinput.KEY_9,
        "num0": uinput.KEY_0, "pageup": uinput.KEY_PAGEUP,
        "pagedown": uinput.KEY_PAGEDOWN, "keypad1": uinput.KEY_KP1,
        "keypad2": uinput.KEY_KP2, "keypad3": uinput.KEY_KP3,
        "keypad4": uinput.KEY_KP4, "keypad5": uinput.KEY_KP5,
        "keypad6": uinput.KEY_KP6, "keypad7": uinput.KEY_KP7,
        "keypad8": uinput.KEY_KP8, "keypad9": uinput.KEY_KP9,
        "keypad0": uinput.KEY_KP0, "period": uinput.KEY_DOT,
        "capslock": uinput.KEY_CAPSLOCK, "numlock": uinput.KEY_NUMLOCK,
        "backspace": uinput.KEY_BACKSPACE, "pause": uinput.KEY_PAUSE,
        "scrolllock": uinput.KEY_SCROLLLOCK, "backquote": uinput.KEY_GRAVE,
        "comma": uinput.KEY_COMMA, "minus": uinput.KEY_MINUS,
        "slash": uinput.KEY_SLASH, "semicolon": uinput.KEY_SEMICOLON,
        "equals": uinput.KEY_EQUAL, "backslash": uinput.KEY_BACKSLASH,
        "kp_period": uinput.KEY_KPDOT, "kp_equals": uinput.KEY_KPEQUAL,
        "a": uinput.KEY_A, "b": uinput.KEY_B, "c": uinput.KEY_C,
        "d": uinput.KEY_D, "e": uinput.KEY_E, "f": uinput.KEY_F,
        "g": uinput.KEY_G, "h": uinput.KEY_H, "i": uinput.KEY_I,
        "j": uinput.KEY_J, "k": uinput.KEY_K, "l": uinput.KEY_L,
        "m": uinput.KEY_M, "n": uinput.KEY_N, "o": uinput.KEY_O,
        "p": uinput.KEY_P, "q": uinput.KEY_Q, "r": uinput.KEY_R,
        "s": uinput.KEY_S, "t": uinput.KEY_T, "u": uinput.KEY_U,
        "v": uinput.KEY_V, "w": uinput.KEY_W, "x": uinput.KEY_X,
        "y": uinput.KEY_Y, "z": uinput.KEY_Z,
    }

    def __init__(self):
        if not os.path.exists(self._RETROARCH_CFG_FILE):
            raise FileNotFoundError("retroarch config does not exist: " + self._RETROARCH_CFG_FILE)

        self.MAPPING = {}
        with open(self._RETROARCH_CFG_FILE) as f:
            for line in f:
                match = self._INPUT_PLAYER1_RE.match(line)
                if match:
                    r_key = match.group(1)
                    r_mapped = match.group(3)
                    cec_key = self._RETROARCH_TO_CEC_KEYMAP.get(r_key)
                    mapped_key = self._RETROARCH_TO_UINTPUT_KEYMAP.get(r_mapped)
                    if cec_key is not None and mapped_key is not None:
                        self.MAPPING[cec_key.key] = Key(mapped_key, cec_key.multi_press)
                    else:
                        logging.debug("message='unable to map retroarch key', key=%s, mapped=%s", r_key, r_mapped)


class CECDaemon(object):
    def __init__(self, bindings=DefaultBindings(), button_repeat_rate_ms=0, button_release_delay_ms=0,
                 double_tap_timeout_ms=200):
        self._lock = Lock()
        self._cec_config = cec.libcec_configuration()
        self._cec_config.strDeviceName = "pyLibCec"
        self._cec_config.bActivateSource = 0
        self._cec_config.deviceTypes.Add(cec.CEC_DEVICE_TYPE_RECORDING_DEVICE)
        self._cec_config.clientVersion = cec.LIBCEC_VERSION_CURRENT
        self._cec_config.iButtonRepeatRateMs = self._button_repeat_rate_ms = button_repeat_rate_ms
        self._cec_config.iButtonReleaseDelayMs = button_release_delay_ms
        self._cec_config.iDoubleTapTimeoutMs = double_tap_timeout_ms
        self._cec_config.SetKeyPressCallback(self._keypress_handler)
        self._cec_adapter = None
        self._keyboard = None
        self._bindings = bindings
        self._last_key = None

    def _keypress_handler(self, cec_code, duration):
        logging.debug("message='received key event', cec_code=%d, duration=%d", cec_code, duration)
        key = self._bindings.map_to_key(cec_code)
        if key is None:
            logging.debug("message='no binding for key', cec_code=%d", cec_code)
        elif (self._button_repeat_rate_ms != 0 or duration == 0) and (key.multi_press or key != self._last_key):
            # Repeat rate set to 0 is a special case:
            # A single click produces 2 entries, one with 0 duration and another with duration > 0.
            # Long clicks produce multiple 0 duration entries.
            # When repeat rate is set, short clicks always have duration 0 and long clicks produce
            # events at the set rate with the duration starting from 0 and increasing until the button is released.
            self._keyboard.emit_click(key.key)
        self._last_key = key

    def _keyboard_init(self):
        if self._keyboard is None:
            logging.debug("message='initializing keyboard'")
            self._keyboard = uinput.Device(self._bindings.mapping_keys())
        else:
            logging.warning("message='keyboard device already initialised'")

    def _keyboard_destroy(self):
        if self._keyboard is not None:
            logging.debug("message='destroying keyboard device'")
            self._keyboard.destroy()
            self._keyboard = None

    def _cec_init(self):
        if self._cec_adapter is None:
            logging.debug("message='starting CEC adapter'")
            cec_adapter = cec.ICECAdapter.Create(self._cec_config)
            adapters = cec_adapter.DetectAdapters()

            if len(adapters) == 0:
                raise NoCECAdapters("No CEC adapters found")

            for adapter in adapters:
                logging.debug("message='found a CEC adapter', port='%s', vendor=%x, product=%x",
                              adapter.strComName, adapter.iVendorId, adapter.iProductId)

            logging.debug("message='starting CEC daemon'")
            cec_adapter.Open(adapters[0].strComName)
            self._cec_adapter = cec_adapter
        else:
            logging.warning("message='CEC daemon already started'")

    def _cec_destroy(self):
        if self._cec_adapter is not None:
            logging.debug("message='stopping CEC daemon'")
            self._cec_adapter.Close()
            self._cec_adapter = None

    def start(self):
        with self._lock:
            self._keyboard_init()
            self._cec_init()

    def stop(self):
        with self._lock:
            self._keyboard_destroy()
            self._cec_destroy()

    def __enter__(self):
        self.start()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.stop()
        return False


def main():
    bindings = OrderedDict(default=DefaultBindings, retropie=RetropieBindings)
    parser = argparse.ArgumentParser(
        description="Tool for translating CEC codes into key presses, allowing to control the PC through the TV.")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
    parser.add_argument("-b", "--bindings", default="default", choices=bindings.keys(), help="Key bindings")
    parser.add_argument("--button-repeat-rate", type=int, default=0, help="Button repeat rate (ms)")
    parser.add_argument("--button-release-delay", type=int, default=0, help="Button release delay (ms)")
    parser.add_argument("--double-tap-timeout", type=int, default=200, help="Double tap timeout (ms)")

    args = parser.parse_args()
    logging.basicConfig(
        level=logging.DEBUG if args.verbose else logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s")
    shutdown = Event()

    def sig_handler(sig, _):
        logging.debug("message='received signal', signal=%d", sig)
        shutdown.set()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    with CECDaemon(bindings=bindings[args.bindings](),
                   button_repeat_rate_ms=args.button_repeat_rate,
                   button_release_delay_ms=args.button_release_delay,
                   double_tap_timeout_ms=args.double_tap_timeout):
        shutdown.wait()


if __name__ == "__main__":
    main()
